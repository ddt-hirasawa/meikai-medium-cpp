1-1
  ・関数を分け、処理を分割しているのは良いです。しかし、引数がptrになっており、何のptrかわからないです。
    小さい関数なので見ればわかるのですが、humanPtr等名称でわかる名前にするように心がけてください。
    (ただし、関数の引数には誰のデータが入ってくるかわからないので個人名称はNGです。メイン内部はOKです。)

1-2
  ・不正な日付を入力させないのはいい考えですが、不正な日付が入力(または設定)された場合、
    正しい日付に"補正"するように作成するとあります。補正する関数を追加で作成し、補正できるようにしてください。
    ※教本に補正するコードはあります。以前に作成したプログラムの中にもあると思いますので、
      補正するロジックについてはコピーしてもらって構いません。

2-1
  ・配列を使用しているため無駄なメモリを確保してしまっています。
    配列を使用せずに10進数で表示させてみてください。(unsigned で変数を宣言するとunsigned intになります。)
    ※そのまま表示、計算して表示の２パターン考えられますが、そのまま表示で問題ありません。
      可能であればout_put関数を修正し、計算して表示してみると理解が深まるかもしれないです。
  ・out_put関数、考え方として非常に素晴らしいと思います。bitについては結構理解できたのではないでしょうか？
  
2-2、2-3
  ・小さい事ですが以下のどちらが見やすいでしょうか。
    (値は仮、フォントはMSゴシック等文字の横幅が同じもので参照してください)
    -----------------------
     tmp:100   |  tmp :200
    tmp1:100   |  tmp1:200
    tmp2:100   |  tmp2:200
    tmp3:100   |  tmp3:300
    -----------------------
    同じ文字は同じ所へ揃えた方が見栄えが良くなりますので、修正してください。

2-6
  ・pow関数を使うより、bitをシフトさせた方が楽に思います。
    1番上のビットを参照し1であれば計算結果となる値に1を足し、
    その値を左へ1bit移動させる、2番目のビットを参照し…で可能かと思われます。
  ・short型の計算結果が不正です。単純ミスと思われます。確認してください。
  ・コメントが全体的に嘘を言っています。32bitから16bitなど、その位置で正確な情報をコメントとしてつけてください。

2-7、2-8
  ・作成されていません。

3-2
  ・関数をポインタで受けとるようにしていますが、最初から3つ受け取ってしまっては
    定義した関数をそのまま使用するのと変わりません。
    (関数を受け取らず、search_ifの中で通常通り関数を呼べば同じになる)
    CASE句で条件分けするのはメイン関数内部とし、条件により別々の関数ポインタを同じ関数へ与えて作成してください。
    条件分岐それぞれで行っているループが無くなりスッキリするはずです。

3-3
  ・3-2と同様です。今回の場合受け取る関数は一つが望ましいです。
  ・○○個"に"あります。となっています。

3-5
  ・0か1を受け取ってるのに、0の場合配列の0を、1(else)の場合配列の1を使用するようなプログラムでもったいないです。
    if文を削除してみてください。