1-1
  ・関数を分け、処理を分割しているのは良いです。しかし、引数がptrになっており、何のptrかわからないです。
    小さい関数なので見ればわかるのですが、humanPtr等名称でわかる名前にするように心がけてください。
    (ただし、関数の引数には誰のデータが入ってくるかわからないので個人名称はNGです。メイン内部はOKです。)

1-2
  ・不正な日付を入力させないのはいい考えですが、不正な日付が入力(または設定)された場合、
    正しい日付に"補正"するように作成するとあります。補正する関数を追加で作成し、補正できるようにしてください。
    ※教本に補正するコードはあります。以前に作成したプログラムの中にもあると思いますので、
      補正するロジックについてはコピーしてもらって構いません。

2-1
  ・配列を使用しているため無駄なメモリを確保してしまっています。
    配列を使用せずに10進数で表示させてみてください。(unsigned で変数を宣言するとunsigned intになります。)
    ※そのまま表示、計算して表示の２パターン考えられますが、そのまま表示で問題ありません。
      可能であればout_put関数を修正し、計算して表示してみると理解が深まるかもしれないです。
  ・out_put関数、考え方として非常に素晴らしいと思います。bitについては結構理解できたのではないでしょうか？
  
2-2、2-3
  ・小さい事ですが以下のどちらが見やすいでしょうか。
    (値は仮、フォントはMSゴシック等文字の横幅が同じもので参照してください)
    -----------------------
     tmp:100   |  tmp :200
    tmp1:100   |  tmp1:200
    tmp2:100   |  tmp2:200
    tmp3:100   |  tmp3:300
    -----------------------
    同じ文字は同じ所へ揃えた方が見栄えが良くなりますので、修正してください。

2-6
  ・pow関数を使うより、bitをシフトさせた方が楽に思います。
    1番上のビットを参照し1であれば計算結果となる値に1を足し、
    その値を左へ1bit移動させる、2番目のビットを参照し…で可能かと思われます。
  ・short型の計算結果が不正です。単純ミスと思われます。確認してください。
  ・コメントが全体的に嘘を言っています。32bitから16bitなど、その位置で正確な情報をコメントとしてつけてください。

2-7、2-8
  ・作成されていません。

3-2
  ・関数をポインタで受けとるようにしていますが、最初から3つ受け取ってしまっては
    定義した関数をそのまま使用するのと変わりません。
    (関数を受け取らず、search_ifの中で通常通り関数を呼べば同じになる)
    CASE句で条件分けするのはメイン関数内部とし、条件により別々の関数ポインタを同じ関数へ与えて作成してください。
    条件分岐それぞれで行っているループが無くなりスッキリするはずです。

3-3
  ・3-2と同様です。今回の場合受け取る関数は一つが望ましいです。
  ・○○個"に"あります。となっています。

3-5
  ・0か1を受け取ってるのに、0の場合配列の0を、1(else)の場合配列の1を使用するようなプログラムでもったいないです。
    if文を削除してみてください。

3-8
  ・int_result関数内部の変数宣言時のコメント、意味が逆になっています。
  ・関数名がint_resultのため、値を取得してくるような感覚を受けます。
    比較する(compare)や等しい(equal)を使った方が良いです。その際に比較する対象が何かが分かればなお良しです。

3-9
  ・修正を確認しました、この点においては正解です。二分探索はソート済みでなければなりませんでした。
    さらに一歩として、配列を渡したら、ソートして検索してくれるような関数を作成してもよかったかもしれません。
    (値の有無が確認できれば良いので、その際の配列番号は意識しなくてOKです。)
  ・一部値の検索が出来ていません。(例：26、32、47など)デバッグモードを駆使して解析し、修正してください。
    (教本通りでなく無限ループを使用していないため起こっていますが、この点についてはOKですGoodです。
     無限ループは引き続き使用しないようにしてください。)

3-10
  ・3-9と同じく一部の値が検索出来ていません。
  ・配列の値に連続した値が存在しないため、改良版の機能がチェックできません。

3-11
  ・指摘ではありませんが、教本がルール外である場合に、
    今までのルールを使用できています、Goodです。この調子でお願いします。

3-12
  ・mergesortコメントが、関数 クイックソートになっています。
  ・マージソートは再帰呼び出しを使用してソートすると理解しやすいです。(非再帰版もあるようですが)
    半分に分割したデータを入力に、再度分割する処理を呼び出します。右側と左側に行います。
    サイズが１(又は2)になったら、分割処理を終了し、マージ処理を行います。
    マージ処理は、左と右の配列の先頭のうち小さい方を取得してセット、セットしたら次の値を参照します。
    言葉では限界があるので、既に調べていると思いますが、マージソートで調べてください。
    また、新規でmarge()関数を作成するとより理解しやすくなるかと思います。
    ※Wikiの画像が分かりやすくておすすめです。どうプログラムに落とすかが難しい所ではありますが…

3-13
  ・無限ループが存在しています。

3-14
  ・処理としてはOKですが、データの関係で体重ソートと身長ソートの結果が同じになっています。
    処理結果を確認するためのデータとして適切なデータを作成できるよう心がけてみてください。

4-2
  1.Derivedのメンバ変数名は date ではなくて data ではありませんか？(日本人ゆえのあるあるなので注意してください。)
  2.初期化する値の名称が全て同じ(tmp1)で表示されてしまっています。メンバの変数名に合わせてください。
    (出力テキストのみの修正でOK)
    
  3.コンストラクタ初期化子での警告が何故出ているか。=>警告を直訳すると、｢date1"は後で初期化されます。｣
    コンストラクタ初期化子で宣言している順番で初期化されるのが本来の動きなのですが、基底クラスを混ぜていても
    先に基底クラスが初期化されるので、この警告が出ているようです。(コンパイラが賢い)
    教本の内容はこれも踏まえた上での内容のようですので、警告が出て正解です。(出るかもと記載してほしいですよね…)
    警告を無くそうと考えて作成した事は素晴らしいです。この調子でお願いします。
    
  4．色々考えて作成してもらったと思うのですが、上記理由により一旦教本通りに修正し、動作を確認後、
    コンストラクタ初期化子で初期化する順番を変更するだけで、この警告が消えるのを確認してください。
    また、本来であれば、教本通りの順番で宣言するのは間違いで、基底クラスを先に宣言するのが正しいようです。
    ※ちなみに、修正前の状態だと、MenbクラスをコピーするためDerivedクラス内で2回Menbクラスが生成され破棄されています。
      出力結果を見て動きを再確認してみてください。

4-3
  1.追加説明、ダウンキャストについて。
    使用は基本ダメです。その通りです。後の章に使用方法が記載されていますが、それでも使用すべきではないと考えられます。
    継承関係で派生(子)クラスが基底(親)クラスの関数を呼べるのは当然として、
    その逆(基底が派生の物を呼ぶ)は出来るべきではありません。(まだ作られていない物の事を何故知っているのでしょうか？)
    ダウンキャストが強いられる場合、設計が悪いと考えるべきと思われます。
    ※1:柴田はC++でここまでの事をしたことが無いので100%正しいとは限りません。見た限り無さそうではありますが、
    もしかしたら、こういうパターンはOKのようなものがあるかもしれません。
    ※2:クラスと継承について理解が深まれば何故ダメかが分かってくると思います。一旦は基本ダメで良いと思います。

4-4
  1.e_04_04.cppのopen_date_resign()関数内部でアロー演算子が使えないとありますが、
    そんな事はありません、使用できます。単純ミスと思われます。
    ※理解しきれておらず詳しく説明できないのがもどかしいのですが、deriver.hのget_weight()をget_weight() constにすると
      求めていた答えになるかと思います。詳細については後の章で出てくると思います。
      また、constを使用している理由と意味を再確認すると理解できるかもしれません。
  2.細かいですが、base.hの29行目
    コンストラクタ初期化子でweightを初期化した後にset_weight()で初期化する処理となっています。
    どちらかが不要ではないでしょうか。

ここまでで、クラスの作成の基礎、形がなんとなく見えてきたのではないでしょうか。
入門編で作成していた物と見比べると、見やすい物が作成できていると思いませんか？

6-2
  ・メイン関数内のクラス宣言のインデントがずれています。合わせてコメントのインデントもずれています。
  ・ヘッダファイル名が分かり辛いです。最後を1,2にする、意味のある名前に変更してください。
    (無印と1だとコピーファイルにも見えます。そもそもコピーを残してプッシュしてはいけませんが…)
6-3
  ・実行した時に何をすればいいかの表示がありません。
  ・関数judg()が人間にもコンピュータにも存在しています。
    全く同じ処理なのであれば、基底クラスに処理を実装した方が良いです。(output_hand()も同じ)

6-4
  ・出力メッセージはクラス1､2ではなく、クラスA,Bの方が分かりやすいかと思います。

7-3
  ・メイン関数のクラス宣言部のインデントがずれています。ブロックを意識してください。

7-4
  ・ヘッダ名称は内部にあるクラス名称と同一、又は関連性がある方が、
    どのヘッダファイルに何のクラスがあるかわかりやすいです。
    C++だと明確なルールは無いようですが、Javaだとファイル名＝クラス名となります。
    今回の例だと1ヘッダ1クラスのようなので、同一名称に修正してください。

8-1
  ・整数の入力を指示され正の整数を入力したらエラー扱いになるのが少し不思議な感覚を受けました。
    負の整数の入力を促し、正の整数であればエラーにする方が自然と思われます。さらに逆の方がさらに自然だと思います。
    (演習問題としてはOKです)

8-2
  ・try_catchブロック内部ではインデントを一つ下げます。修正してください。
    今回は不要ですが、下がりすぎて気持ち悪くなる場合は、インデント以外で綺麗にする必要があります。
    (関数化してthrowして、上位でcatchするのがいいかな？色々あると思うのですがちょっとわかってないです。)

8-3
  ・DividedZeroは割る数が0の場合にのみ発生させるのが普通です。
  ・チェック済みだと思いますが、例外がthrowされ、catchした後、処理が残っていても中断されます。

8-5
  ・出力する文字列が指定されたものと異なっています。問題を再確認してください。

